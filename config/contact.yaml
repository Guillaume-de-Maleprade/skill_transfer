# 
# Copyright (C) 2015-2017 Georg Bartels <georg.bartels@cs.uni-bremen.de>
# 
# This file is part of giskard.
# 
# giskard is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 

scope:
  # definition of some nice short-cuts
  - unit-x: {vector3: [1, 0, 0]}
  - unit-y: {vector3: [0, 1, 0]}
  - unit-z: {vector3: [0, 0, 1]}
  - identity-rot: {axis-angle: [unit-x, 0]} 
  - zero-vec: {vector3: [0, 0, 0]}
  
  # definition of input transforms 
  - gripper-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-var: 0}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-var: 1}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-var: 2}]}]
        - frame: [{axis-angle: [unit-z, {input-var: 3}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-var: 4}]}, zero-vec]
        - frame: [{axis-angle: [unit-x, {input-var: 5}]}, zero-vec]
  - frying-pan-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-var: 6}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-var: 7}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-var: 8}]}]
        - frame: [{axis-angle: [unit-z, {input-var: 9}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-var: 10}]}, zero-vec]
        - frame: [{axis-angle: [unit-x, {input-var: 11}]}, zero-vec]
  - knife-gripper-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-var: 12}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-var: 13}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-var: 14}]}]
        - frame: [{axis-angle: [unit-z, {input-var: 15}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-var: 16}]}, zero-vec]
        - frame: [{axis-angle: [unit-x, {input-var: 17}]}, zero-vec]

  # definition of features
  - knife-base: 
      transform-vector:
        - frame-mul: [gripper-frame, knife-gripper-frame]
        - {vector3: [0.018, 0.003, -0.002]}       
  - frying-pan-edge: {transform-vector: [frying-pan-frame, {vector3: [0.142186, -0.139196, -0.0318549]}]}
  #- frying-pan-edge: {transform-vector: [frying-pan-frame, {vector3: [0.098775, -0.036126, -0.140118]}]}
  #- frying-pan-edge: {transform-vector: [frying-pan-frame, {vector3: [0.128, -0.145, -0.015]}]}

  # expressions used in constraints 
  - knife-frying-pan-contact-x: {double-sub: [{x-coord: knife-base}, {x-coord: frying-pan-edge}]}
  - knife-frying-pan-contact-y: {double-sub: [{y-coord: knife-base}, {y-coord: frying-pan-edge}]}
  - knife-frying-pan-contact-z: {double-sub: [{z-coord: knife-base}, {z-coord: frying-pan-edge}]}

  # some constants
  - controllable-weight: 0.001 # mu * 1
  - constraint-weight: 10.001 # mu + 10

controllable-constraints:
  - controllable-constraint: [-0.3, 0.3, controllable-weight, 0, gripper_pos_x]
  - controllable-constraint: [-0.3, 0.3, controllable-weight, 1, gripper_pos_y]
  - controllable-constraint: [-0.3, 0.3, controllable-weight, 2, gripper_pos_z]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, 3, gripper_rot_x]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, 4, gripper_rot_y]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, 5, gripper_rot_z]

soft-constraints: 
  - soft-constraint: 
      - {double-sub: [0.0, knife-frying-pan-contact-x]} # control law for lower boundary
      - {double-sub: [0.005, knife-frying-pan-contact-x]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - knife-frying-pan-contact-x # expression used for Jacobian calcuation
      - frying_pan_knife_contact_x # name of expression reported

  - soft-constraint: 
      - {double-sub: [0.0, knife-frying-pan-contact-y]} # control law for lower boundary
      - {double-sub: [0.005, knife-frying-pan-contact-y]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - knife-frying-pan-contact-y # expression used for Jacobian calcuation
      - frying_pan_knife_contact_y # name of expression reported

  - soft-constraint: 
      - {double-sub: [0.0, knife-frying-pan-contact-z]} # control law for lower boundary
      - {double-sub: [0.005, knife-frying-pan-contact-z]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - knife-frying-pan-contact-z # expression used for Jacobian calcuation
      - frying_pan_knife_contact_z # name of expression reported

hard-constraints: [] # no hard constraints used in this motion
