scope:
  # definition of some nice short-cuts
  - unit-x: {vector3: [1, 0, 0]}
  - unit-y: {vector3: [0, 1, 0]}
  - unit-z: {vector3: [0, 0, 1]}
  - identity-rot: {axis-angle: [unit-x, 0]} 
  - zero-vec: {vector3: [0, 0, 0]}
  
  # definition of input transforms 
  - gripper-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-var: 0}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-var: 1}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-var: 2}]}]
        - frame: [{axis-angle: [unit-z, {input-var: 3}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-var: 4}]}, zero-vec]
        - frame: [{axis-angle: [unit-x, {input-var: 5}]}, zero-vec]
  - bowl-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-var: 6}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-var: 7}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-var: 8}]}]
        - frame: [{axis-angle: [unit-z, {input-var: 9}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-var: 10}]}, zero-vec]
        - frame: [{axis-angle: [unit-x, {input-var: 11}]}, zero-vec]
  - ladle-gripper-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-var: 12}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-var: 13}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-var: 14}]}]
        - frame: [{axis-angle: [unit-z, {input-var: 15}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-var: 16}]}, zero-vec]
        - frame: [{axis-angle: [unit-x, {input-var: 17}]}, zero-vec]

  # definition of features
  - ladle-center: 
      transform-vector:
        - frame-mul: [gripper-frame, ladle-gripper-frame]
        - {vector3: [-0.025, -0.0026, -0.012]}       
  - bowl-center: {transform-vector: [bowl-frame, {vector3: [0.0, 0.0, 0.0]}]}

  # expressions used in constraints 
  - ladle-bowl-distance: {vector-sub: [bowl-center, ladle-center]}

  # some constants
  - controllable-weight: 0.001 # mu * 1
  - constraint-weight: 10.001 # mu + 10

controllable-constraints:
  - controllable-constraint: [-0.3, 0.3, controllable-weight, 0, gripper_pos_x]
  - controllable-constraint: [-0.3, 0.3, controllable-weight, 1, gripper_pos_y]
  - controllable-constraint: [-0.3, 0.3, controllable-weight, 2, gripper_pos_z]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, 3, gripper_rot_x]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, 4, gripper_rot_y]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, 5, gripper_rot_z]

soft-constraints: 
  - soft-constraint: 
      - {double-sub: [-0.007, {x-coord: ladle-bowl-distance}]} # control law for lower boundary
      - {double-sub: [0.007, {x-coord: ladle-bowl-distance}]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - {x-coord: ladle-bowl-distance} # expression used for Jacobian calcuation
      - contact_x # name of expression reported
  - soft-constraint: 
      - {double-sub: [-0.007, {y-coord: ladle-bowl-distance}]} # control law for lower boundary
      - {double-sub: [0.007, {y-coord: ladle-bowl-distance}]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - {y-coord: ladle-bowl-distance} # expression used for Jacobian calcuation
      - contact_y # name of expression reported
  - soft-constraint: 
      - {double-sub: [-0.007, {z-coord: ladle-bowl-distance}]} # control law for lower boundary
      - {double-sub: [0.007, {z-coord: ladle-bowl-distance}]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - {z-coord: ladle-bowl-distance} # expression used for Jacobian calcuation
      - contact_z # name of expression reported

hard-constraints: [] # no hard constraints used in this motion
